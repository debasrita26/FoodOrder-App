{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Debasrita Banerjee\\\\Desktop\\\\Food Order App\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport classes from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = props => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchMeals = async () => {\n      // pass the firebase url to connect to the firebase database\n      const response = await fetch(\"https://foodorder-app-e6b79-default-rtdb.firebaseio.com/meals.json\"); //check if response is ok or not, if not then\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n\n      const responseData = await response.json(); //create and empty array and then use a for in loop to go trough all the data in the response object\n\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        //pushing the object in the empty array\n        loadedMeals.push({\n          id: key,\n          //key will be the id of the individual meals fetched\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      } //setting the data\n\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    }; //try calling fetchMeals, in the catch we will set lloading to false because \n\n\n    try {\n      fetchMeals();\n    } catch {\n      setIsLoading;\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"names":["React","useEffect","useState","classes","Card","MealItem","AvailableMeals","props","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","MealsLoading","mealsList","map","meal"],"sources":["C:/Users/Debasrita Banerjee/Desktop/Food Order App/src/components/Meals/AvailableMeals.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\nimport Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nconst AvailableMeals = (props) => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const fetchMeals = async () => {\r\n      // pass the firebase url to connect to the firebase database\r\n      const response = await fetch(\r\n        \"https://foodorder-app-e6b79-default-rtdb.firebaseio.com/meals.json\"\r\n      );\r\n\r\n      //check if response is ok or not, if not then\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong\");\r\n      }\r\n\r\n      const responseData = await response.json();\r\n\r\n      //create and empty array and then use a for in loop to go trough all the data in the response object\r\n      const loadedMeals = [];\r\n\r\n      for (const key in responseData) {\r\n        //pushing the object in the empty array\r\n        loadedMeals.push({\r\n          id: key, //key will be the id of the individual meals fetched\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n\r\n      //setting the data\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    //try calling fetchMeals, in the catch we will set lloading to false because \r\n    try {\r\n      fetchMeals();\r\n    } catch {\r\n      setIsLoading\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        <p>Loading....</p>\r\n      </section>\r\n    );\r\n  }\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;EAAA;;EAChC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,EAA1C;EAEAD,SAAS,CAAC,MAAM;IACdU,YAAY,CAAC,IAAD,CAAZ;;IACA,MAAMG,UAAU,GAAG,YAAY;MAC7B;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oEAD0B,CAA5B,CAF6B,CAM7B;;MACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;MACD;;MAED,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B,CAX6B,CAa7B;;MACA,MAAMC,WAAW,GAAG,EAApB;;MAEA,KAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;QAC9B;QACAE,WAAW,CAACE,IAAZ,CAAiB;UACfC,EAAE,EAAEF,GADW;UACN;UACTG,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFT;UAGfC,WAAW,EAAEP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHhB;UAIfC,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;QAJV,CAAjB;MAMD,CAxB4B,CA0B7B;;;MACAlB,QAAQ,CAACY,WAAD,CAAR;MACAV,YAAY,CAAC,KAAD,CAAZ;IACD,CA7BD,CAFc,CAiCd;;;IACA,IAAI;MACFG,UAAU;IACX,CAFD,CAEE,MAAM;MACNH,YAAY;IACb;EACF,CAvCQ,EAuCN,EAvCM,CAAT;;EAyCA,IAAID,SAAJ,EAAe;IACb,oBACE;MAAS,SAAS,EAAEP,OAAO,CAACyB,YAA5B;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAKD;;EACD,MAAMC,SAAS,GAAGrB,KAAK,CAACsB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;IAEE,EAAE,EAAEA,IAAI,CAACP,EAFX;IAGE,IAAI,EAAEO,IAAI,CAACN,IAHb;IAIE,WAAW,EAAEM,IAAI,CAACL,WAJpB;IAKE,KAAK,EAAEK,IAAI,CAACJ;EALd,GACOI,IAAI,CAACP,EADZ;IAAA;IAAA;IAAA;EAAA,QADgB,CAAlB;EASA,oBACE;IAAS,SAAS,EAAErB,OAAO,CAACK,KAA5B;IAAA,uBACE,QAAC,IAAD;MAAA,uBACE;QAAA,UAAKqB;MAAL;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CArED;;GAAMvB,c;;KAAAA,c;AAuEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}